@model Collections.Web.Models.Collection.CreateCollectionViewModel
@inject IViewLocalizer ViewLocalizer;
@{
    ViewData["Title"] = "Create Collection";
}
<div class="container">
    <h1>@ViewLocalizer["CreateNewCollection"]</h1>
    <hr/>
    <div>
        @using (Html.BeginForm("Create", "Collections", FormMethod.Post, new {@enctype="multipart/form-data"}))
        {
            @Html.HiddenFor(m => m.UserProfileId)
            <div id="inputsBlock">
                <div class="mb-3">
                    <label class="form-label">@Html.DisplayNameFor(m => m.Title)</label>
                    @Html.TextBoxFor(m => m.Title, new { @class = "form-control" })
                    @Html.ValidationMessageFor(m => m.Title, string.Empty, new { @class = "form-validation text-danger" })
                </div>
                <div class="mb-3">
                    <label class="form-label">@Html.DisplayNameFor(m => m.Description)</label>
                    <div>
                        @Html.TextAreaFor(m => m.Description, new { @class = "form-control", @oninput="OnTextChanged", @id="markdown-description"})
                    </div>
                    @Html.ValidationMessageFor(m => m.Description, string.Empty, new { @class = "form-validation text-danger" })
                </div>
                
                <div class="mb-3">
                    @Html.DisplayNameFor(m => m.SelectedThemeId)
                    @Html.DropDownListFor(m => m.SelectedThemeId, Model.Themes, new {@class="form-select"})
                </div>
                <div class="mb-3">
                    <label class="form-label">@Html.DisplayNameFor(m => m.Image) <span class="text-muted small">@ViewLocalizer["5mb less"]</span></label>
                    <input type="file" asp-for="Image" class="form-control"/>
                    @Html.ValidationMessageFor(m => m.Image, string.Empty, new {@class="text-danger"})
                </div>
                <h5>@ViewLocalizer["AdditionalFields"]</h5>
                <hr/>
            </div>
            <div class="row text-center ms-1 me-1 mb-3">
                <input type="button" value="@ViewLocalizer["AddNewField"]" class="btn btn-outline-success" id="addPropertyInput"/>
            </div>
            <input type="submit" class="btn btn-primary" value="@ViewLocalizer["Submit"]"/>
        }
    </div>
    
</div>
@section Scripts
{
    <script>
        {
            let i = 0;
            function remove() {
                i--;
                $("#adfield"+ i).remove()
            }
            const getHtml = () => {
                let value =
                    "<div class='bg-light p-3 rounded-1 mb-3' id='adfield"+i+"'>" +
                    "<div class='row'>" +
                    "<div class='form-group col'>" +
                    "<label class='control-label'>Name</label>" +
                    "<input type='text' class='form-control valid' id='ExtraFieldValueTypes_0__Name' name='ExtraFieldValueTypes[" + i + "].Name' data-val='true' data-val-required='Name must not be empty.' aria=describedby='_0__Name-error' aria-invalid='false' autocomplete='off' />" +
                    "<span class='text-danger field-validation-valid' data-valmsg-for='ExtraFieldValueTypes[" + i + "].Name' data-valmsg-replace='true'></span>" +
                    "</div>" +
                    "<div class='form-group col'>" +
                    "<label class='control-label'>Type</label>" +
                    "<select class='form-select valid' name='ExtraFieldValueTypes[" + i + "].ValueType'>" +
                    "<option value='0'>String</option>" +
                    "<option value='1'>Text</option>" +
                    "<option value='2'>Number</option>" +
                    "<option value='3'>Date</option>" +
                    "<option value='4'>Binary</option>" +
                    "</select>" +
                    "</div>" +
                    "</div>" +
                    "<div class='d-flex justify-content-between pt-1 pb-1'>"+
                    "<div>" +
                    "<div class='form-check'>" +
                    "<input type='checkbox' class='form-check-input' id='ExtraFieldValueTypes_0__IsVisible' name='ExtraFieldValueTypes["+i+"].IsVisible' data-val='true' value='true'/>" +
                    "<label class='form-check-label'>Is Visible</label>" +
                    "</div>" +
                    "<div class='form-check'>" +
                    "<input type='checkbox' class='form-check-input' id='ExtraFieldValueTypes_0__IsRequired' name='ExtraFieldValueTypes["+i+"].IsRequired' data-val='true' value='true'/>" +
                    "<label class='form-check-label'>Is Required</label>" +
                    "</div>" +
                    "</div>" +
                    "<button type='button' onclick='remove()' class='cancel-button btn btn-outline-danger'>Cancel</button>" +
                    "</div>" +
                    "</div>" +
                    "</div>";
                i++;
                return value;
            }
            addPropertyInput.onclick = () => {
                let html = getHtml();
                inputsBlock.insertAdjacentHTML('beforeend', html);
            }
        }
    </script>
}
