@model Collections.Web.Models.Collection.UpdateCollectionViewModel
@{
    ViewData["Title"] = "Update " + @Model.Title;
}
<div class="container">
    <h1>@ViewLocalizer["UpdateCollection"] @Model.Title</h1>
    <hr/>
    <div>
        @using (Html.BeginForm("Update", "Collections", FormMethod.Post, new {@enctype="multipart/form-data"}))
        {
            <div>
                @Html.HiddenFor(m => m.Id)
                <div class="mb-3">
                    <label class="form-label">@Html.DisplayNameFor(m => m.Title)</label>
                    @Html.TextBoxFor(m => m.Title, new { @class = "form-control" })
                    @Html.ValidationMessageFor(m => m.Title, string.Empty, new { @class = "form-validation text-danger" })
                </div>
                <div class="mb-3">
                    <label class="form-label">@Html.DisplayNameFor(m => m.Description)</label>
                    <div class="row">
                        <div class="me-3 col">
                            @Html.TextAreaFor(m => m.Description, new { @class = "form-control" })
                        </div>
                        <div class="col">
                            Preview
                        </div>
                    </div>
                    @Html.ValidationMessageFor(m => m.Description, string.Empty, new { @class = "form-validation text-danger" })
                </div>
                @Html.HiddenFor(m => m.ImageName)
                @Html.HiddenFor(m => m.ImageSource)
                <div class="mb-3">
                    <label class="form-label">@Html.DisplayNameFor(m => m.Image)</label>
                    <input type="file" asp-for="Image" class="form-control"/>
                </div>

                <h5>@ViewLocalizer["AdditionalFields"]</h5>
                <hr/>
                <div id="updateBlock">
                    @if(Model.ExtraFieldValueTypes != null) 
                    {
                        for (var i = 0; i < Model.ExtraFieldValueTypes.Count; i++)
                        {
                            @Html.HiddenFor(m => m.ExtraFieldValueTypes[i].Id)
                            @Html.HiddenFor(m => m.ExtraFieldValueTypes[i].IsRequired)
                            @Html.HiddenFor(m => m.ExtraFieldValueTypes[i].ValueType)
                            <div class="bg-light rounded-1 mb-3 p-3">
                                <div>
                                    <label class="form-label">@Html.DisplayNameFor(m => m.ExtraFieldValueTypes[i].Name)</label>
                                    @Html.TextBoxFor(m => m.ExtraFieldValueTypes[i].Name, new { @class = "form-control" })
                                </div>

                                <label>@Html.DisplayNameFor(m => m.ExtraFieldValueTypes[i].IsVisible)</label>
                                @Html.CheckBoxFor(m => m.ExtraFieldValueTypes[i].IsVisible)
                            </div>
                        }
                    }
                </div>
                <div class="row text-center ms-1 me-1 mb-3">
                    <input type="button" value="@ViewLocalizer["AddField"]" class="btn btn-outline-success" id="addPropertyInput"/>
                </div>
            </div>
            
            <input type="submit" class="btn btn-primary" value="@ViewLocalizer["Submit"]"/>
        }
    </div>
</div>
<script>
    {
        let i = 0;
        function remove() {
            i--;
            $("#adfield"+ i).remove()
        }
        const getHtml = () => {
            let value =
                "<div class='bg-light p-3 rounded-1 mb-3' id='adfield"+i+"'>" +
                "<div class='row'>" +
                "<div class='form-group col'>" +
                "<label class='control-label'>Name</label>" +
                "<input type='text' class='form-control valid' id='NewExtraFieldValueTypes_0__Name' name='NewExtraFieldValueTypes[" + i + "].Name' data-val='true' data-val-required='Name must not be empty.' aria=describedby='_0__Name-error' aria-invalid='false' autocomplete='off' />" +
                "<span class='text-danger field-validation-valid' data-valmsg-for='NewExtraFieldValueTypes[" + i + "].Name' data-valmsg-replace='true'></span>" +
                "</div>" +
                "<div class='form-group col'>" +
                "<label class='control-label'>Type</label>" +
                "<select class='form-select valid' name='NewExtraFieldValueTypes[" + i + "].ValueType'>" +
                "<option value='0'>String</option>" +
                "<option value='1'>Text</option>" +
                "<option value='2'>Number</option>" +
                "<option value='3'>Date</option>" +
                "<option value='4'>Binary</option>" +
                "</select>" +
                "</div>" +
                "</div>" +
                "<div class='d-flex justify-content-between pt-1 pb-1'>"+
                "<div>" +
                "<div class='form-check'>" +
                "<input type='checkbox' class='form-check-input' id='NewExtraFieldValueTypes_0__IsVisible' name='NewExtraFieldValueTypes["+i+"].IsVisible' data-val='true' value='true'/>" +
                "<label class='form-check-label'>Is Visible</label>" +
                "</div>" +
                "<div class='form-check'>" +
                "<input type='checkbox' class='form-check-input' id='NewExtraFieldValueTypes_0__IsRequired' name='NewExtraFieldValueTypes["+i+"].IsRequired' data-val='true' value='true'/>" +
                "<label class='form-check-label'>Is Required</label>" +
                "</div>" +
                "</div>" +
                "<button type='button' onclick='remove()' class='cancel-button btn btn-outline-danger'>Cancel</button>" +
                "</div>" +
                "</div>" +
                "</div>";
            i++;
            return value;
        }
        addPropertyInput.onclick = () => {
            let html = getHtml();
            updateBlock.insertAdjacentHTML('beforeend', html);
        }
    }
</script>