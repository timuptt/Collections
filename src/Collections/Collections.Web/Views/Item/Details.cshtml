@using Collections.ApplicationCore.Models
@using Collections.Web.Interfaces
@using Markdig
@using Microsoft.AspNetCore.Mvc.Rendering
@using Microsoft.AspNetCore.Mvc.TagHelpers
@model Collections.Web.Models.Items.ItemExtendedViewModel;
@inject ICurrentUserProvider CurrentUser

<!DOCTYPE html>

<html>
<head>
    <title>title</title>
</head>
<body>
<div class="container">
    <div class="d-flex justify-content-between">
        <h1>@Model.Title <small class="text-muted">@ViewLocalizer["InCollection"] <a asp-action="Details" asp-controller="Collections" asp-route-id="@Model.UserCollectionId" class="text-decoration-none">@Model.UserCollectionTitle</a></small></h1>
        <div class="p-3">
            @if (CurrentUser.HasPermissions(@Model.UserProfileId))
                    {
                        <a asp-action="Update" asp-route-id="@Model.Id" class="btn btn-sm btn-outline-secondary"><i class="bi bi-pen"></i></a>
                        <a asp-action="Delete" asp-route-id="@Model.Id" class="btn btn-sm btn-outline-danger"><i class="bi bi-trash"></i></a>
                    }
        </div>
    </div>
    <hr/>
    @Html.HiddenFor(m => m.Id, new { @id = "groupId" })

    <div class="p-3">
        @foreach (var extraField in @Model.ExtraFields)
        {
            <div class="d-flex">

                @switch (extraField.ExtraFieldValueType!.ValueType)
                {
                    case ValueTypes.String:
                        <label class="me-1 text-muted">@extraField.ExtraFieldValueType!.Name:</label>
                        <p>@extraField.Value</p>
                        break;
                    case ValueTypes.Binary:
                        <label class="me-1 text-muted">@extraField.ExtraFieldValueType!.Name:</label>
                        <input type="checkbox" class="disabled" checked="@bool.Parse(extraField.Value)"/>
                        break;
                    case ValueTypes.Date:
                        <label class="me-1 text-muted">@extraField.ExtraFieldValueType!.Name:</label>
                        <p>@extraField.Value</p>
                        break;
                    case ValueTypes.Number:
                        <label class="me-1 text-muted">@extraField.ExtraFieldValueType!.Name:</label>
                        <p>@extraField.Value</p>
                        break;
                }
            </div>
        }

        <div class="d-flex mt-3">
            <label class="me-1 text-muted">@Html.DisplayNameFor(m => m.AddedOn):</label>
            <p>@Model.AddedOn</p>
        </div>
        <div class="d-flex">
            <label class="me-1 text-muted">@Html.DisplayNameFor(m => m.ModifiedOn):</label>
            <p>@Model.ModifiedOn</p>
        </div>
        @{
            var markdownFields = @Model.ExtraFields.Where(e => e.ExtraFieldValueType.ValueType == ValueTypes.Text);
            if (markdownFields.Any())
            {
                foreach (var field in markdownFields)
                {
                    <div class="p-3 bg-light mt-3 mb-3 rounded-1 w-auto">
                        <small class="text-muted">@field.ExtraFieldValueType.Name</small>
                        @Html.Raw(Markdown.ToHtml(@field.Value))
                    </div>
                }
            }
        }
        <div>
            <div>
                @if (!User.Identity.IsAuthenticated || Model.Likes.All(p => p.UserProfileId != CurrentUser.ProfileId))
                {
                    <a type="button" class="btn btn-outline-secondary" onclick="location.href = '@Url.Action("LikeItem", "Item", new { itemId = @Model.Id })'"><span class="bi bi-heart"></span> @Model.Likes.Count()</a>
                }
                else
                {
                    <a type="button" class="btn btn-outline-danger" onclick="location.href = '@Url.Action("LikeItem", "Item", new { itemId = @Model.Id })'"><span class="bi bi-heart-fill"></span> @Model.Likes.Count()</a>
                }
            </div>

        </div>

    </div>

</div>
<div class="container-fluid pt-3">
    <div class="container">
        <h2>@ViewLocalizer["Comments"]</h2>
        <hr/>
        <div>
            <div class="p-3">
                @using (Html.BeginForm("WriteComment", "Item", FormMethod.Post))
                {
                    @Html.Hidden("ItemId", value: @Model.Id)
                    @Html.TextArea("Body", "", new {@class="form-control mb-3", rows="5", placeholder=ViewLocalizer["WriteAComment"].Value})
                    <input type="submit" class="btn btn-primary align-content-end" value="@ViewLocalizer["Send"]" id="writeComment"/>
                }
            </div>
        </div>
        <div id="comments" class="p-1">
            @foreach (var comment in @Model.Comments)
            {
                <div class="bg-light p-1 rounded-1 mb-2">
                    <div class="d-flex justify-content-between p-2">
                        <h5 class="">@comment.UserName</h5>
                        <p class="text-muted micro">@comment.AddedOn</p>
                    </div>
                    <div class="bg-white p-2">
                        <p>@comment.Body</p>
                    </div>
                </div>
            }
        </div>
       
    </div>
</div>
@section Scripts
{
    <script src="~/js/commentHubClient.js"></script>
}
</body>
</html>
